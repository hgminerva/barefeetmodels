"use strict";
/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("@angular/core");
var i1 = require("./controls");
var i2 = require("@angular/common");
var i3 = require("../core/services/vg-controls-hidden");
var VgControlsModuleNgFactory = i0.ɵcmf(i1.VgControlsModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵa]]), i0.ɵmpd(4608, i3.VgControlsHidden, i3.VgControlsHidden, []), i0.ɵmpd(512, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(512, i1.VgControlsModule, i1.VgControlsModule, [])]); });
exports.VgControlsModuleNgFactory = VgControlsModuleNgFactory;

//# sourceMappingURL=data:application/json;base64,